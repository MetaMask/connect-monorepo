{"version":3,"file":"AddressHelpers.mjs","sourceRoot":"","sources":["../../src/helpers/AddressHelpers.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,KAAa,EAAE,SAAmB,EAAY,EAAE;IAC3F,OAAO,SAAS,CAAC,MAAM,CAAW,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,OAAO,EAAE,CAAC,CAAC;SACnC;QACD,OAAO,MAAM,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;AACR,CAAC,CAAC","sourcesContent":["/**\n * Formats addresses as [CAIP-10](https://chainagnostic.org/CAIPs/caip-10) addresses for it's respective request scope. See [CAIP-25](https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-25.md) and .\n * @param scope - The scope to create session for.\n * @param addresses - The addresses to format. If address is empty, we remove it from the array.\n * @returns The formatted addresses with the scope to create session for.\n */\nexport const getCaip25FormattedAddresses = (scope: string, addresses: string[]): string[] => {\n\treturn addresses.reduce<string[]>((result, address) => {\n\t\tif (address.length > 0) {\n\t\t\tresult.push(`${scope}:${address}`);\n\t\t}\n\t\treturn result;\n\t}, []);\n};\n"]}