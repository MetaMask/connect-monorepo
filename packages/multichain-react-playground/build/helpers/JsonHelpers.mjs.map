{"version":3,"file":"JsonHelpers.mjs","sourceRoot":"","sources":["../../src/helpers/JsonHelpers.ts"],"names":[],"mappings":"AAGA,MAAM,WAAW,GAAG,CAAC,MAAa,EAAE,YAAuC,EAAO,EAAE;IACnF,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QACxC,IAAI,SAAS,EAAE;YACd,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;SACrB;QACD,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAAE,CAAC,CAAC;AACR,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,MAAoB,EAAE,EAAE;IAC5D,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACrD,OAAO;YACN,MAAM,EAAE,MAAM,CAAC,IAAI;YACnB,MAAM,EAAE,EAAE;SACV,CAAC;KACF;IACD,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,MAAM,EAAE,GAAG,cAAsC,CAAC;IAClD,MAAM,iBAAiB,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAE,OAAyB,CAAC,KAAK,CAAC,CAAC;IACvF,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,iBAAiB,EAAE,MAAM,CAAC,MAAmC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;IACpJ,OAAO;QACN,MAAM,EAAE,MAAM,CAAC,IAAI;QACnB,MAAM;KACN,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAS,EAAE,SAAS,GAAG,GAAG,EAAwC,EAAE;IAChG,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACjD,IAAI,mBAAmB,CAAC,MAAM,IAAI,SAAS,EAAE;QAC5C,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;KACvD;IACD,OAAO;QACN,IAAI,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC;QAC7C,SAAS,EAAE,IAAI;KACf,CAAC;AACH,CAAC,CAAC","sourcesContent":["/** biome-ignore-all lint/suspicious/noExplicitAny: OK */\nimport type { ContentDescriptorObject, ExampleObject, ExamplePairingObject, MethodObject } from '@open-rpc/meta-schema';\n\nconst paramsToObj = (params: any[], methodParams: ContentDescriptorObject[]): any => {\n\treturn params.reduce((acc, val, i) => {\n\t\tconst paramName = methodParams[i]?.name;\n\t\tif (paramName) {\n\t\t\tacc[paramName] = val;\n\t\t}\n\t\treturn acc;\n\t}, {});\n};\n\nexport const openRPCExampleToJSON = (method: MethodObject) => {\n\tif (!method.examples || method.examples.length === 0) {\n\t\treturn {\n\t\t\tmethod: method.name,\n\t\t\tparams: [],\n\t\t};\n\t}\n\tconst examplePairing = method.examples?.[0];\n\tconst ex = examplePairing as ExamplePairingObject;\n\tconst paramsFromExample = ex.params.map((example) => (example as ExampleObject).value);\n\tconst params = method.paramStructure === 'by-name' ? paramsToObj(paramsFromExample, method.params as ContentDescriptorObject[]) : paramsFromExample;\n\treturn {\n\t\tmethod: method.name,\n\t\tparams,\n\t};\n};\n\nexport const truncateJSON = (json: any, maxLength = 100): { text: string; truncated: boolean } => {\n\tconst originalStringified = JSON.stringify(json);\n\tif (originalStringified.length <= maxLength) {\n\t\treturn { text: originalStringified, truncated: false };\n\t}\n\treturn {\n\t\ttext: originalStringified.slice(0, maxLength),\n\t\ttruncated: true,\n\t};\n};\n"]}