{"version":3,"file":"MethodInvocationHelpers.mjs","sourceRoot":"","sources":["../../src/helpers/MethodInvocationHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SessionData } from '@metamask/multichain-api-client';\nimport type { CaipAccountId, CaipChainId, Json } from '@metamask/utils';\nimport type { MethodObject } from '@open-rpc/meta-schema';\nimport type { Dispatch, SetStateAction } from 'react';\n\n/**\n * Normalizes parameters for method invocation.\n * - For Solana methods: keeps params as an object\n * - For EVM methods: ensures params are in array format\n * - Applies special handling for specific methods.\n *\n * @param method - The method name being invoked.\n * @param params - The raw parameters.\n * @param scope - The scope/chain ID to determine the chain type.\n * @returns Normalized parameters (array for EVM, object for Solana).\n */\nexport const normalizeMethodParams = (method: string, params: Json, scope?: string): Json[] | Json => {\n\t// Solana methods should keep params as objects, not arrays\n\tconst solanaMethodsThatUseObjects = ['signMessage', 'signTransaction', 'signAllTransactions', 'signAndSendTransaction', 'signIn'];\n\n\t// Check if this is a Solana method that needs object params\n\tif (solanaMethodsThatUseObjects.includes(method) || scope?.startsWith('solana:')) {\n\t\t// For Solana, return params as-is (should be an object)\n\t\treturn params;\n\t}\n\n\t// For EVM methods, ensure params is always an array\n\tlet paramsArray = Array.isArray(params) ? params : [params];\n\n\t// Special handling for eth_signTypedData_v3/v4: second parameter must be JSON string\n\tif ((method === 'eth_signTypedData_v3' || method === 'eth_signTypedData_v4') && paramsArray.length >= 2) {\n\t\tconst firstParam = paramsArray[0];\n\t\tconst secondParam = paramsArray[1];\n\n\t\tif (firstParam !== undefined && secondParam !== undefined) {\n\t\t\tparamsArray = [\n\t\t\t\tfirstParam, // address (string)\n\t\t\t\ttypeof secondParam === 'string' ? secondParam : JSON.stringify(secondParam), // typed data (JSON string)\n\t\t\t];\n\t\t}\n\t}\n\n\treturn paramsArray;\n};\n\n/**\n * Updates the invoke method results state in an immutable way.\n *\n * @param previousResults - Previous invoke method results state.\n * @param scope - The scope being updated.\n * @param method - The method being updated.\n * @param result - The result or error to add.\n * @param request - The request that was made.\n * @returns Updated results state.\n */\nexport const updateInvokeMethodResults = (\n\tpreviousResults: Record<string, Record<string, { result: Json | Error; request: Json }[]>>,\n\tscope: CaipChainId,\n\tmethod: string,\n\tresult: Json | Error,\n\trequest: Json,\n) => {\n\tconst scopeResults = previousResults[scope] ?? {};\n\tconst methodResults = scopeResults[method] ?? [];\n\tconst newResults = {\n\t\t...previousResults,\n\t\t[scope]: {\n\t\t\t...scopeResults,\n\t\t\t[method]: [...methodResults, { result, request }],\n\t\t},\n\t};\n\n\treturn newResults;\n};\n\nexport const extractRequestParams = (finalRequestObject: { params: { request: { params: Json } } }): Json => {\n\treturn finalRequestObject.params.request.params;\n};\n\nexport const extractRequestForStorage = (finalRequestObject: { params: { request: Json } }): Json => {\n\treturn finalRequestObject.params.request;\n};\n\n/**\n * Auto-selects the first available account for a scope if none is currently selected.\n * Updates the provided setter function with the selected account.\n *\n * @param caipChainId - The CAIP chain ID of the scope.\n * @param currentSelectedAccount - The currently selected account for this scope.\n * @param currentSession - The current session object.\n * @param setSelectedAccounts - Function to update the selected accounts state.\n * @returns The selected account or null if none available.\n */\nexport const autoSelectAccountForScope = (\n\tcaipChainId: CaipChainId,\n\tcurrentSelectedAccount: CaipAccountId | null,\n\tcurrentSession: SessionData,\n\tsetSelectedAccounts: Dispatch<SetStateAction<Record<string, CaipAccountId | null>>>,\n): CaipAccountId | null => {\n\tif (currentSelectedAccount) {\n\t\treturn currentSelectedAccount;\n\t}\n\n\tconst scopeDetails = currentSession?.sessionScopes?.[caipChainId];\n\tconst [firstAccount] = scopeDetails?.accounts ?? [];\n\n\tif (firstAccount) {\n\t\tconsole.log(`üîß Auto-selecting first account for ${caipChainId}: ${String(firstAccount)}`);\n\n\t\tsetSelectedAccounts((prev) => ({\n\t\t\t...prev,\n\t\t\t[caipChainId]: firstAccount,\n\t\t}));\n\n\t\treturn firstAccount;\n\t}\n\n\tconsole.error(`‚ùå No accounts available for scope ${caipChainId}`);\n\treturn null;\n};\n\n/**\n * Prepares a method request object for invocation.\n *\n * @param method - The method name to invoke.\n * @param caipChainId - The CAIP chain ID.\n * @param selectedAccount - The selected account for this scope.\n * @param metamaskOpenrpcDocument - The MetaMask OpenRPC document.\n * @param injectParams - Function to inject parameters for specific methods.\n * @param openRPCExampleToJSON - Function to convert OpenRPC examples to JSON.\n * @param METHODS_REQUIRING_PARAM_INJECTION - Object containing methods that require parameter injection.\n * @returns The prepared request object or null if method not found.\n */\nexport const prepareMethodRequest = (\n\tmethod: string,\n\tcaipChainId: CaipChainId,\n\tselectedAccount: CaipAccountId | null,\n\t// biome-ignore lint/suspicious/noExplicitAny: Needed\n\tmetamaskOpenrpcDocument: any,\n\tinjectParams: (method: string, params: Json, account: CaipAccountId, scope: CaipChainId) => Json,\n\topenRPCExampleToJSON: (methodObj: MethodObject) => Json,\n\tMETHODS_REQUIRING_PARAM_INJECTION: Record<string, boolean>,\n): Json | null => {\n\tconst example = metamaskOpenrpcDocument?.methods.find((methodObj: MethodObject) => methodObj.name === method);\n\n\tif (!example) {\n\t\tconsole.error(`‚ùå No example found for method: ${method}`);\n\t\treturn null;\n\t}\n\n\tlet exampleParams: Json = openRPCExampleToJSON(example as MethodObject);\n\n\tif (method in METHODS_REQUIRING_PARAM_INJECTION && selectedAccount) {\n\t\texampleParams = injectParams(method, exampleParams, selectedAccount, caipChainId);\n\t}\n\n\treturn {\n\t\tmethod: 'wallet_invokeMethod',\n\t\tparams: {\n\t\t\tscope: caipChainId,\n\t\t\trequest: exampleParams,\n\t\t},\n\t};\n};\n"]}