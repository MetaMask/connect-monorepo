{"version":3,"file":"methods.cjs","sourceRoot":"","sources":["../../src/constants/methods.ts"],"names":[],"mappings":"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","sourcesContent":["import MetaMaskOpenRPCDocument from '@metamask/api-specs';\nimport { parseCaipAccountId, parseCaipChainId, numberToHex } from '@metamask/utils';\nimport type { CaipAccountId, CaipChainId, Json } from '@metamask/utils';\n\n/**\n * Methods that require an account parameter.\n */\nexport const METHODS_REQUIRING_PARAM_INJECTION = {\n\teth_sendTransaction: true,\n\teth_signTypedData_v4: true,\n\tpersonal_sign: true,\n\teth_getBalance: true,\n\twallet_sendCalls: true,\n\twallet_getCapabilities: true,\n} as const;\n\n/**\n * Injects address and chainId (where applicable) into example params for a given method.\n * @param method - The method to inject the address into.\n * @param exampleParams - The example params to inject the address into.\n * @param addressToInject - The address to inject.\n * @param scopeToInject - The scope to inject the address into.\n * @returns The updated example params with the address injected.\n */\nexport const injectParams = (method: string, exampleParams: Json, addressToInject: CaipAccountId, scopeToInject: CaipChainId): Json => {\n\tconst { address: parsedAddress } = parseCaipAccountId(addressToInject);\n\tconst { reference: chainId } = parseCaipChainId(scopeToInject);\n\n\tif (\n\t\t!(method in METHODS_REQUIRING_PARAM_INJECTION) ||\n\t\ttypeof exampleParams !== 'object' ||\n\t\texampleParams === null ||\n\t\t!('method' in exampleParams) ||\n\t\t!('params' in exampleParams) ||\n\t\t!Array.isArray(exampleParams.params)\n\t) {\n\t\treturn exampleParams;\n\t}\n\n\tswitch (method) {\n\t\tcase 'eth_sendTransaction':\n\t\t\tif (exampleParams.params.length > 0 && typeof exampleParams.params[0] === 'object' && exampleParams.params[0] !== null) {\n\t\t\t\treturn {\n\t\t\t\t\t...exampleParams,\n\t\t\t\t\tparams: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...exampleParams.params[0],\n\t\t\t\t\t\t\tfrom: parsedAddress,\n\t\t\t\t\t\t\tto: parsedAddress,\n\t\t\t\t\t\t\tvalue: '0x0',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...exampleParams.params.slice(1),\n\t\t\t\t\t],\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'personal_sign':\n\t\t\tif (exampleParams.params.length >= 2) {\n\t\t\t\treturn {\n\t\t\t\t\t...exampleParams,\n\t\t\t\t\tparams: [exampleParams.params[0], parsedAddress, ...exampleParams.params.slice(2)] as Json[],\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'eth_signTypedData_v4':\n\t\t\tif (exampleParams.params.length >= 2 && typeof exampleParams.params[1] === 'object' && exampleParams.params[1] !== null) {\n\t\t\t\tconst typedData = exampleParams.params[1];\n\t\t\t\tif (typeof typedData === 'object' && typedData !== null && 'domain' in typedData && typeof typedData.domain === 'object' && typedData.domain !== null) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...exampleParams,\n\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\tparsedAddress,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...typedData,\n\t\t\t\t\t\t\t\tdomain: {\n\t\t\t\t\t\t\t\t\t...typedData.domain,\n\t\t\t\t\t\t\t\t\tchainId,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'eth_getBalance':\n\t\t\treturn {\n\t\t\t\t...exampleParams,\n\t\t\t\tparams: [parsedAddress, 'latest'],\n\t\t\t};\n\n\t\t// EIP-5792\n\t\tcase 'wallet_sendCalls': {\n\t\t\tconst params = exampleParams.params[0];\n\t\t\tif (typeof params === 'object') {\n\t\t\t\treturn {\n\t\t\t\t\t...exampleParams,\n\t\t\t\t\tparams: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...params,\n\t\t\t\t\t\t\tchainId: numberToHex(Number(chainId)),\n\t\t\t\t\t\t\tfrom: parsedAddress,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'wallet_getCapabilities': {\n\t\t\treturn {\n\t\t\t\t...exampleParams,\n\t\t\t\tparams: [parsedAddress, [numberToHex(Number(chainId))]],\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn exampleParams;\n};\n\n/**\n * Known Wallet RPC methods.\n */\nexport const KnownWalletRpcMethods: string[] = ['wallet_registerOnboarding', 'wallet_scanQRCode'];\n\n/**\n * Wallet methods that are EIP-155 compatible but not scoped to a specific chain.\n */\nexport const WalletEip155Methods = ['wallet_addEthereumChain'];\n\n/**\n * EIP-155 specific notifications.\n */\nexport const Eip155Notifications = ['eth_subscription'];\n\n/**\n * Methods that are only available in the EIP-1193 wallet provider.\n */\nconst Eip1193OnlyMethods = [\n\t'wallet_switchEthereumChain',\n\t'wallet_getPermissions',\n\t'wallet_requestPermissions',\n\t'wallet_revokePermissions',\n\t'eth_requestAccounts',\n\t'eth_accounts',\n\t'eth_coinbase',\n\t'net_version',\n\t'metamask_logWeb3ShimUsage',\n\t'metamask_getProviderState',\n\t'metamask_sendDomainMetadata',\n\t'wallet_registerOnboarding',\n];\n\n/**\n * All MetaMask methods, except for ones we have specified in the constants above.\n */\nexport const Eip155Methods = MetaMaskOpenRPCDocument.methods\n\t// eslint-disable-next-line @typescript-eslint/no-shadow\n\t.map(({ name }: { name: string }) => name)\n\t.filter((method: string) => !WalletEip155Methods.includes(method))\n\t.filter((method: string) => !KnownWalletRpcMethods.includes(method))\n\t.filter((method: string) => !Eip1193OnlyMethods.includes(method));\n"]}