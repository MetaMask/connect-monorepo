{"version":3,"file":"ScopeCard.mjs","sourceRoot":"","sources":["../../src/components/ScopeCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import MetaMaskOpenRPCDocument from '@metamask/api-specs';\nimport type { Scope, SessionData } from '@metamask/multichain';\nimport { type CaipAccountAddress, type CaipAccountId, type CaipChainId, type Json, parseCaipAccountId } from '@metamask/utils';\nimport type { MethodObject, OpenrpcDocument } from '@open-rpc/meta-schema';\nimport { useCallback, useEffect, useState } from 'react';\nimport { injectParams, METHODS_REQUIRING_PARAM_INJECTION } from '../constants/methods';\nimport { getNetworkName } from '../constants/networks';\nimport { escapeHtmlId } from '../helpers/IdHelpers';\nimport { openRPCExampleToJSON, truncateJSON } from '../helpers/JsonHelpers';\nimport { extractRequestForStorage, extractRequestParams, normalizeMethodParams, updateInvokeMethodResults } from '../helpers/MethodInvocationHelpers';\nimport { generateSolanaMethodExamples } from '../helpers/solana-method-signatures';\nimport { useSDK } from '../sdk';\n\nconst metamaskOpenrpcDocument: OpenrpcDocument = MetaMaskOpenRPCDocument as OpenrpcDocument;\n\nexport function ScopeCard({ scope, details }: { scope: Scope; details: SessionData['sessionScopes'][Scope] }) {\n\tconst { accounts } = details;\n\n\tconst setInitialMethodsAndAccounts = useCallback((currentSession: any) => {\n\t\tconst initialSelectedMethods: Record<string, string> = {};\n\t\tconst initialSelectedAccounts: Record<string, CaipAccountId> = {};\n\t\tconst initialInvokeMethodRequests: Record<string, string> = {};\n\n\t\tObject.entries(currentSession.sessionScopes).forEach(([scope, details]: [string, any]) => {\n\t\t\tif (details.accounts?.[0]) {\n\t\t\t\tinitialSelectedAccounts[scope] = details.accounts[0];\n\t\t\t}\n\n\t\t\tconst getInvokeMethodRequest = (request: unknown) => ({\n\t\t\t\tmethod: 'wallet_invokeMethod',\n\t\t\t\tparams: {\n\t\t\t\t\tscope,\n\t\t\t\t\trequest,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (scope.startsWith('eip155:')) {\n\t\t\t\tinitialSelectedMethods[scope] = 'eth_blockNumber';\n\t\t\t\tconst example = metamaskOpenrpcDocument?.methods.find((method) => (method as MethodObject).name === 'eth_blockNumber');\n\t\t\t\tconst request = openRPCExampleToJSON(example as MethodObject);\n\t\t\t\tconst invokeMethodRequest = getInvokeMethodRequest(request);\n\t\t\t\tinitialInvokeMethodRequests[scope] = JSON.stringify(invokeMethodRequest, null, 2);\n\t\t\t}\n\t\t});\n\t\tsetInvokeMethodRequests(initialInvokeMethodRequests);\n\t\tsetSelectedMethods(initialSelectedMethods);\n\t\tsetSelectedAccounts(initialSelectedAccounts);\n\t}, []);\n\n\tconst handleSessionChangedNotification = useCallback(\n\t\t(notification: any) => {\n\t\t\tif (notification.params?.sessionScopes) {\n\t\t\t\tsetInitialMethodsAndAccounts({\n\t\t\t\t\tsessionScopes: notification.params.sessionScopes,\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[setInitialMethodsAndAccounts],\n\t);\n\tconst { invokeMethod, session } = useSDK();\n\n\tuseEffect(() => {\n\t\thandleSessionChangedNotification(session);\n\t}, [session, handleSessionChangedNotification]);\n\n\tconst [invokeMethodResults, setInvokeMethodResults] = useState<Record<string, Record<string, { result: any; request: any }[]>>>({});\n\tconst [selectedAccount, setSelectedAccount] = useState<CaipAccountId | undefined>(accounts?.length ? accounts[0] : undefined);\n\tconst [invokeMethodRequests, setInvokeMethodRequests] = useState<Record<string, string>>({});\n\tconst [selectedAccounts, setSelectedAccounts] = useState<Record<string, CaipAccountId | null>>({\n\t\t[scope]: accounts?.length ? (accounts[0] ?? null) : null,\n\t});\n\tconst [selectedMethods, setSelectedMethods] = useState<Record<string, string>>({});\n\n\tconst networkName = getNetworkName(scope);\n\tconst accountCount = accounts?.length ?? 0;\n\n\tconst handleUpdateInvokeMethodSolana = async (scope: CaipChainId, address: CaipAccountAddress, method: string) => {\n\t\tif (!scope.startsWith('solana:')) {\n\t\t\tthrow new Error('Invalid CAIP chain ID. It must start with \"solana:\"');\n\t\t}\n\n\t\tconst solanaExample = await generateSolanaMethodExamples(method, address);\n\n\t\tconst defaultRequest = {\n\t\t\tmethod: 'wallet_invokeMethod',\n\t\t\tparams: {\n\t\t\t\tscope,\n\t\t\t\trequest: {\n\t\t\t\t\tmethod,\n\t\t\t\t\t...solanaExample,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tsetInvokeMethodRequests((prev) => ({\n\t\t\t...prev,\n\t\t\t[scope]: JSON.stringify(defaultRequest, null, 2),\n\t\t}));\n\t};\n\tconst handleMethodSelect = async (evt: React.ChangeEvent<HTMLSelectElement>, scope: CaipChainId) => {\n\t\tconst selectedMethod = evt.target.value;\n\t\tsetSelectedMethods((prev) => ({\n\t\t\t...prev,\n\t\t\t[scope]: selectedMethod,\n\t\t}));\n\n\t\tconst selectedAddress = selectedAccounts[scope];\n\t\tif (!selectedAddress) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (scope.startsWith('solana:')) {\n\t\t\tawait handleUpdateInvokeMethodSolana(scope, parseCaipAccountId(selectedAddress).address, selectedMethod);\n\t\t} else {\n\t\t\tconst example = metamaskOpenrpcDocument?.methods.find((method) => (method as MethodObject).name === selectedMethod);\n\t\t\tif (example) {\n\t\t\t\tlet exampleParams: Json = openRPCExampleToJSON(example as MethodObject);\n\n\t\t\t\tif (selectedMethod in METHODS_REQUIRING_PARAM_INJECTION) {\n\t\t\t\t\texampleParams = injectParams(selectedMethod, exampleParams, selectedAddress, scope);\n\t\t\t\t}\n\n\t\t\t\tconst defaultRequest = {\n\t\t\t\t\tmethod: 'wallet_invokeMethod',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tscope,\n\t\t\t\t\t\trequest: exampleParams,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tsetInvokeMethodRequests((prev) => ({\n\t\t\t\t\t...prev,\n\t\t\t\t\t[scope]: JSON.stringify(defaultRequest, null, 2),\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleInvokeMethod = async (scope: Scope, method: string, requestObject?: any) => {\n\t\tconsole.log(`🔧 handleInvokeMethod called: ${method} on ${scope}`);\n\n\t\t// Handle missing request gracefully\n\t\tconst scopeRequest = invokeMethodRequests[scope];\n\t\tif (!requestObject && !scopeRequest) {\n\t\t\tthrow new Error(`No request configured for method ${method} on scope ${scope}`);\n\t\t}\n\n\t\tconst finalRequestObject = requestObject ?? JSON.parse(scopeRequest ?? '{}');\n\t\tconsole.log(`📋 Request object:`, finalRequestObject);\n\n\t\ttry {\n\t\t\t// Extract and normalize parameters\n\t\t\tconst params = extractRequestParams(finalRequestObject);\n\t\t\tconsole.log(`📤 Calling invokeMethod with params:`, params);\n\n\t\t\tconst normalizedParams = normalizeMethodParams(method, params, scope);\n\t\t\tconsole.log(`📤 Normalized params:`, normalizedParams);\n\n\t\t\tconst result = await invokeMethod({\n\t\t\t\tscope,\n\t\t\t\trequest: {\n\t\t\t\t\tmethod,\n\t\t\t\t\tparams: normalizedParams,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconsole.log(`📥 Received result:`, result);\n\n\t\t\tconst request = extractRequestForStorage(finalRequestObject);\n\t\t\tsetInvokeMethodResults((prev) => {\n\t\t\t\tconst newResults = updateInvokeMethodResults(prev, scope, method, result as Json, request);\n\t\t\t\tconsole.log(`💾 Updated invoke results:`, newResults);\n\t\t\t\treturn newResults;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error('❌ Error invoking method:', error);\n\n\t\t\tconst request = extractRequestForStorage(finalRequestObject);\n\t\t\tsetInvokeMethodResults((prev) => {\n\t\t\t\tconst newResults = updateInvokeMethodResults(prev, scope, method, error as Error, request);\n\t\t\t\tconsole.log(`💾 Updated invoke results (error):`, newResults);\n\t\t\t\treturn newResults;\n\t\t\t});\n\t\t}\n\t};\n\treturn (\n\t\t<div\n\t\t\tdata-testid={`scope-card-${escapeHtmlId(scope)}`}\n\t\t\tkey={scope}\n\t\t\tclassName=\"bg-white border border-gray-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow duration-200\"\n\t\t>\n\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t<h3 title={`${networkName} (${scope})`} className=\"text-lg font-semibold text-gray-800 truncate\">\n\t\t\t\t\t{networkName}\n\t\t\t\t</h3>\n\t\t\t</div>\n\n\t\t\t<div className=\"mb-4\">\n\t\t\t\t<div className=\"flex items-center gap-2 mb-2\">\n\t\t\t\t\t<span className=\"text-sm font-medium text-gray-600\">Accounts:</span>\n\t\t\t\t\t<span className=\"text-sm text-gray-500 bg-blue-50 text-blue-700 px-2 py-1 rounded-full\">{accountCount} available</span>\n\t\t\t\t</div>\n\n\t\t\t\t<select\n\t\t\t\t\tvalue={selectedAccount}\n\t\t\t\t\tonChange={async (evt) => {\n\t\t\t\t\t\tconst selectedAccountValue = evt.target.value as CaipAccountId;\n\t\t\t\t\t\tsetSelectedAccount(selectedAccountValue);\n\t\t\t\t\t\tsetSelectedAccounts((prev) => ({\n\t\t\t\t\t\t\t...prev,\n\t\t\t\t\t\t\t[scope]: selectedAccountValue,\n\t\t\t\t\t\t}));\n\t\t\t\t\t}}\n\t\t\t\t\tdata-testid={`accounts-select-${escapeHtmlId(scope)}`}\n\t\t\t\t\tid={`accounts-select-${escapeHtmlId(scope)}`}\n\t\t\t\t\tclassName=\"w-full p-3 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\n\t\t\t\t>\n\t\t\t\t\t<option value=\"\">Select an account</option>\n\t\t\t\t\t{(accounts ?? []).map((account: CaipAccountId) => {\n\t\t\t\t\t\tconst { address } = parseCaipAccountId(account);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<option data-testid={`${escapeHtmlId(String(account))}-option`} key={address} value={account}>\n\t\t\t\t\t\t\t\t{address}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</select>\n\t\t\t</div>\n\n\t\t\t{selectedAccount && (\n\t\t\t\t<div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-md\">\n\t\t\t\t\t<p className=\"text-sm text-green-800 font-medium\">Active Account:</p>\n\t\t\t\t\t<p className=\"text-sm text-green-700 font-mono break-all\">{parseCaipAccountId(selectedAccount).address}</p>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className=\"mb-4\">\n\t\t\t\t<div className=\"flex items-center gap-2 mb-2\">\n\t\t\t\t\t<span className=\"text-sm font-medium text-gray-600\">Available Methods:</span>\n\t\t\t\t\t<span className=\"text-sm text-gray-500 bg-purple-50 text-purple-700 px-2 py-1 rounded-full\">{details.methods?.length ?? 0} available</span>\n\t\t\t\t</div>\n\n\t\t\t\t<select\n\t\t\t\t\tdata-testid={`${escapeHtmlId(scope)}-select`}\n\t\t\t\t\tvalue={selectedMethods[scope] ?? ''}\n\t\t\t\t\tonChange={async (evt) => {\n\t\t\t\t\t\tawait handleMethodSelect(evt, scope);\n\t\t\t\t\t}}\n\t\t\t\t\tid={`method-select-${escapeHtmlId(scope)}`}\n\t\t\t\t\tclassName=\"w-full p-3 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors bg-white hover:border-gray-400\"\n\t\t\t\t>\n\t\t\t\t\t<option value=\"\">Select a method to invoke</option>\n\t\t\t\t\t{(details.methods ?? []).map((method: string) => (\n\t\t\t\t\t\t<option data-testid={`${escapeHtmlId(scope)}-${method}-option`} key={method} value={method}>\n\t\t\t\t\t\t\t{method}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t</div>\n\n\t\t\t{selectedMethods[scope] && (\n\t\t\t\t<div className=\"mt-4 p-3 bg-purple-50 border border-purple-200 rounded-md\">\n\t\t\t\t\t<p className=\"text-sm text-purple-800 font-medium\">Selected Method:</p>\n\t\t\t\t\t<p className=\"text-sm text-purple-700 font-mono\">{selectedMethods[scope]}</p>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<details className=\"mt-4 border border-gray-200 rounded-lg\" data-testid={`invoke-method-details-${escapeHtmlId(scope)}`} id={`invoke-method-details-${escapeHtmlId(scope)}`}>\n\t\t\t\t<summary className=\"px-4 py-3 bg-gray-50 cursor-pointer hover:bg-gray-100 transition-colors duration-150 rounded-t-lg flex items-center gap-2 font-medium text-gray-700\">\n\t\t\t\t\t<svg className=\"w-4 h-4 transform transition-transform duration-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<title>Invoke Method</title>\n\t\t\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n\t\t\t\t\t</svg>\n\t\t\t\t\tInvoke Method Request\n\t\t\t\t</summary>\n\t\t\t\t<div className=\"p-4 bg-white border-t border-gray-200\">\n\t\t\t\t\t<div className=\"mb-2\">\n\t\t\t\t\t\t<label htmlFor={`invoke-method-request-${escapeHtmlId(scope)}`} className=\"block text-sm font-medium text-gray-600 mb-1\">\n\t\t\t\t\t\t\tJSON Request:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tdata-testid={`${escapeHtmlId(scope)}-collapsible-content-textarea`}\n\t\t\t\t\t\tvalue={invokeMethodRequests[scope] ?? ''}\n\t\t\t\t\t\tonChange={(evt) => setInvokeMethodRequests((prev) => ({ ...prev, [scope]: evt.target.value }))}\n\t\t\t\t\t\trows={12}\n\t\t\t\t\t\tid={`invoke-method-request-${escapeHtmlId(scope)}`}\n\t\t\t\t\t\tclassName=\"w-full p-3 font-mono text-sm border border-gray-300 rounded-md resize-y min-h-[200px] max-h-[400px] focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-50\"\n\t\t\t\t\t\tplaceholder=\"Method request will appear here...\"\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"mt-2 text-xs text-gray-500\">Edit the JSON above to customize the request parameters before invoking the method.</div>\n\t\t\t\t</div>\n\t\t\t</details>\n\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tdata-testid={`invoke-method-${escapeHtmlId(scope)}-btn`}\n\t\t\t\tonClick={async () => {\n\t\t\t\t\tconst method = selectedMethods[scope];\n\t\t\t\t\tif (method) {\n\t\t\t\t\t\tawait handleInvokeMethod(scope as Scope, method);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tid={`invoke-method-${escapeHtmlId(scope)}-btn`}\n\t\t\t\tdisabled={!selectedMethods[scope] || !invokeMethodRequests[scope]}\n\t\t\t\tclassName={`\n            w-full mt-4 px-6 py-3 rounded-lg font-medium text-white transition-all duration-200\n            flex items-center justify-center gap-2\n            ${!selectedMethods[scope] || !invokeMethodRequests[scope]\n\t\t\t\t\t\t? 'bg-gray-300 cursor-not-allowed text-gray-500'\n\t\t\t\t\t\t: 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 hover:shadow-lg hover:scale-105 active:scale-95 cursor-pointer'\n\t\t\t\t\t}\n          `}\n\t\t\t>\n\t\t\t\t<svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t<title>Invoke Method</title>\n\t\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n\t\t\t\t</svg>\n\t\t\t\tInvoke Method\n\t\t\t</button>\n\n\t\t\t{Object.entries(invokeMethodResults[scope] ?? {}).map(([method, results]) => {\n\t\t\t\treturn results.map(({ result, request }, index) => {\n\t\t\t\t\tconst { text, truncated } = truncateJSON(result, 150);\n\t\t\t\t\tconst isError = result instanceof Error;\n\t\t\t\t\treturn truncated ? (\n\t\t\t\t\t\t<details\n\t\t\t\t\t\t\t// biome-ignore lint/suspicious/noArrayIndexKey: Needed\n\t\t\t\t\t\t\tkey={`${method}-${index}`}\n\t\t\t\t\t\t\tdata-testid={`method-result-details-${escapeHtmlId(scope)}-${method}-${index}`}\n\t\t\t\t\t\t\tid={`method-result-details-${escapeHtmlId(scope)}-${method}-${index}`}\n\t\t\t\t\t\t\tclassName=\"mt-4 border border-gray-200 rounded-lg\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<summary className={`px-4 py-3 cursor-pointer hover:bg-gray-50 transition-colors duration-150 rounded-t-lg ${isError ? 'bg-red-50 border-red-200' : 'bg-gray-50'}`}>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<svg className=\"w-4 h-4 transform transition-transform duration-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t\t\t\t\t<title>Scope card</title>\n\t\t\t\t\t\t\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n\t\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<span className={`font-mono text-sm font-medium ${isError ? 'text-red-700' : 'text-purple-700'}`}>{method}</span>\n\t\t\t\t\t\t\t\t\t\t\t<span className={`text-xs px-2 py-1 rounded-full ${isError ? 'bg-red-100 text-red-600' : 'bg-green-100 text-green-600'}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t{isError ? 'Error' : 'Success'}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-gray-500 mb-1\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"font-medium\">Params:</span> {JSON.stringify(request.params)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"text-xs text-gray-600 font-mono bg-gray-100 p-2 rounded\">{text}...</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</summary>\n\t\t\t\t\t\t\t<div className=\"p-4 bg-white border-t border-gray-200\">\n\t\t\t\t\t\t\t\t<div className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"block text-sm font-medium text-gray-600 mb-1\">Full Response:</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t\t\t\t<pre className=\"bg-gray-50 p-4 rounded-md text-sm font-mono overflow-x-auto max-h-96 overflow-y-auto border border-gray-200 text-left\">\n\t\t\t\t\t\t\t\t\t\t<code id={`invoke-method-${escapeHtmlId(scope)}-${method}-result-${index}`} className={isError ? 'text-red-600' : 'text-gray-800'}>\n\t\t\t\t\t\t\t\t\t\t\t{JSON.stringify(result, null, 2)}\n\t\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</details>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t// biome-ignore lint/suspicious/noArrayIndexKey: Needed\n\t\t\t\t\t\t\tkey={`${method}-${index}`}\n\t\t\t\t\t\t\tclassName=\"mt-4 border border-gray-200 rounded-lg bg-white\"\n\t\t\t\t\t\t\tdata-testid={`method-result-item-${escapeHtmlId(scope)}-${method}-${index}`}\n\t\t\t\t\t\t\tid={`method-result-item-${escapeHtmlId(scope)}-${method}-${index}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className={`px-4 py-3 border-b border-gray-200 ${isError ? 'bg-red-50' : 'bg-gray-50'}`}>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 mb-1\">\n\t\t\t\t\t\t\t\t\t<span className={`font-mono text-sm font-medium ${isError ? 'text-red-700' : 'text-purple-700'}`}>{method}</span>\n\t\t\t\t\t\t\t\t\t<span className={`text-xs px-2 py-1 rounded-full ${isError ? 'bg-red-100 text-red-600' : 'bg-green-100 text-green-600'}`}>{isError ? 'Error' : 'Success'}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"p-4\">\n\t\t\t\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t\t\t\t<pre className=\"bg-gray-50 p-4 rounded-md text-sm font-mono overflow-x-auto border border-gray-200 text-left\">\n\t\t\t\t\t\t\t\t\t\t<code id={`invoke-method-${escapeHtmlId(scope)}-${method}-result-${index}`} className={isError ? 'text-red-600' : 'text-gray-800'}>\n\t\t\t\t\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t})}\n\t\t</div>\n\t);\n}\n"]}