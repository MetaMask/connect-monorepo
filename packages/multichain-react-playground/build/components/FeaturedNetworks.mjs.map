{"version":3,"file":"FeaturedNetworks.mjs","sourceRoot":"","sources":["../../src/components/FeaturedNetworks.tsx"],"names":[],"mappings":";;;;;;;AAEA,4CAA4C;AAC5C,OAAO,MAAK,cAAc;;AAE1B,OAAO,EAAE,iBAAiB,EAAE,kCAA8B;AAC1D,OAAO,EAAE,YAAY,EAAE,iCAA6B;AAQpD,MAAM,CAAC,MAAM,gBAAgB,GAAoC,CAAC,EAAE,cAAc,EAAE,iBAAiB,EAAE,gCAAgC,EAAE,EAAE,EAAE;IAC5I,MAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC3D,OAAO,CACN,cAAK,SAAS,EAAC,WAAW,YACxB,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CACjD,iBAAqB,SAAS,EAAC,wCAAwC,aACtE,gBACC,IAAI,EAAC,UAAU,EACf,IAAI,EAAE,OAAO,EACb,OAAO,EAAE,cAAc,CAAC,OAAgB,CAAC,IAAI,KAAK,EAClD,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CACjB,iBAAiB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;wBAC5B,GAAG,IAAI;wBACP,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO;qBAC7B,CAAC,CAAC,EAEJ,QAAQ,EAAE,CAAC,gCAAgC,iBAC9B,oBAAoB,YAAY,CAAC,OAAO,CAAC,EAAE,EACxD,EAAE,EAAE,oBAAoB,YAAY,CAAC,OAAO,CAAC,EAAE,EAC/C,SAAS,EAAC,oFAAoF,GAC7F,EACF,eAAM,SAAS,EAAC,eAAe,YAAE,WAAW,GAAQ,KAhBzC,OAAO,CAiBX,CACR,CAAC,GACG,CACN,CAAC;AACH,CAAC,CAAC","sourcesContent":["/* eslint-disable */\nimport type { Scope } from '@metamask/multichain';\n// biome-ignore lint/style/useImportType: ok\nimport React from 'react';\n\nimport { FEATURED_NETWORKS } from '../constants/networks';\nimport { escapeHtmlId } from '../helpers/IdHelpers';\n\ntype FeaturedNetworksProps = {\n\tselectedScopes: Record<string, boolean>;\n\tsetSelectedScopes: React.Dispatch<React.SetStateAction<Record<string, boolean>>>;\n\tisExternallyConnectableConnected: boolean;\n};\n\nexport const FeaturedNetworks: React.FC<FeaturedNetworksProps> = ({ selectedScopes, setSelectedScopes, isExternallyConnectableConnected }) => {\n\tconst featuredNetworks = Object.entries(FEATURED_NETWORKS);\n\treturn (\n\t\t<div className=\"space-y-2\">\n\t\t\t{featuredNetworks.map(([networkName, chainId]) => (\n\t\t\t\t<label key={chainId} className=\"flex items-center gap-2 cursor-pointer\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tname={chainId}\n\t\t\t\t\t\tchecked={selectedScopes[chainId as Scope] ?? false}\n\t\t\t\t\t\tonChange={(evt) =>\n\t\t\t\t\t\t\tsetSelectedScopes((prev) => ({\n\t\t\t\t\t\t\t\t...prev,\n\t\t\t\t\t\t\t\t[chainId]: evt.target.checked,\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdisabled={!isExternallyConnectableConnected}\n\t\t\t\t\t\tdata-testid={`network-checkbox-${escapeHtmlId(chainId)}`}\n\t\t\t\t\t\tid={`network-checkbox-${escapeHtmlId(chainId)}`}\n\t\t\t\t\t\tclassName=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500 focus:ring-2 disabled:opacity-50\"\n\t\t\t\t\t/>\n\t\t\t\t\t<span className=\"text-gray-700\">{networkName}</span>\n\t\t\t\t</label>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n"]}